# Loading our train and test dataset.
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Check the data
str(train)
str(test)
# a quick look at train and test data.
View(train)
View(test)
# Create survived column in test set
test$Survived <- NA
View(test)
# Bind test and train data to create new variables in both sets
df <- rbind(train, test)
View(df)
dim(df)
str(df)
# Here Ticket and PassengerId column is not so much important so i can delete these columns.
# Droping the ticket and PassengerId columns
df1 <- df[c(-1,-9)]
View(df1)
summary(df1)
# checking NA value
summary(is.na(df1))
table(df1$Embarked)
df1$Embarked[is.na(df1$Embarked)] <- 'S'
## Check if it worked
which(is.na(df1$Embarked))
df1$Fare[is.na(df1$Fare)] <- with(df1,ave(Fare,Pclass,FUN = function(x) median(x,na.rm = TRUE)))[is.na(df1$Fare)]
## Check if it worked
## Check if it worked
which(is.na(df1$Fare)
## Check if it worked
which(is.na(df1$Fare))
## Check if it worked
which(is.na(df1$Fare))
# Importing the necessary library
library(rpart) # Loading Decision Tree Package
library(plyr) # means
library(dplyr) # data cleaning
library(stringr) # data cleaning
library(naniar)  # missing data visualizations
library(ggplot2) # Data visualization
library(readr) # CSV file I/o, e.g. the read_csv function.
library(rattle) # Visualize Decision trees
library(rpart.plot) # visualize decision trees.
library(caret) # model tunning
library(caTools) # cross validation
library(pROC) # ROC curves
library(RColorBrewer)
library(Hmisc)
library(kableExtra) # markdown tables
df1$Title <- NA
view(df1)
df1$Title <- str_sub(df1$Name,str_locate(df1$Name,',')[,1]+2,str_locate(df1$Name,'\\.')[,1]-1)
which(is.na(df1$Title))
view(df1)
table(df1$Title)
# Convert to factor
df1$Title<-factor(df1$Title)
view(df1)
df1$FamilySize <- df1$SibSp + df1$Parch + 1
df1$relFamilySize <- NA
df1$relFamilySize <- ifelse(df1$FamilySize == 1, "self",
ifelse(df1$FamilySize <= 4, "small", "large"))
df1$relFamilySize <- factor(df1$relFamilySize)
## Check if it worked
table(df1$relFamilySize)
view(df1)
which(is.na(df1$relFamilySize))
view(df1)
# map with name with number
df1$Embarked <- ifelse(df1$Embarked=='S', 0,
ifelse(df1$Embarked=='C',1,2))
view(df1)
df1$Title <-ifelse(df1$Title='Mr', 0,
ifelse(df1$Title=='Miss',1,
ifelse(df1$Title=='Mrs',2,
ifelse(df1$Title=='Master',3,4))))
df1$Title <-ifelse(df1$Title=='Mr', 0,
ifelse(df1$Title=='Miss',1,
ifelse(df1$Title=='Mrs',2,
ifelse(df1$Title=='Master',3,4))))
view(df1)
view(df)
df1$Sex <- ifelse(df1$Sex=='male',0,
ifelse(df1$Sex=='female',1))
df1$Sex <- ifelse(df1$Sex=='male',0,1)
view(df1)
#  I returned to Age and its missing values. I used the corrgram package to construct a correlogram
#to visualize which numeric variables are most correlated to Age
library(corrgram)
install.packages("corrgram")
#  I returned to Age and its missing values. I used the corrgram package to construct a correlogram
#to visualize which numeric variables are most correlated to Age
table(is.na(res$Age))
#  I returned to Age and its missing values. I used the corrgram package to construct a correlogram
#to visualize which numeric variables are most correlated to Age
table(is.na(df1$Age))
corrgram(df1)
corrgram(df1)
corrgram::panel.cor(df1)
corrgram(df1, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt, main="Car Milage Data in PC2/PC1 Order")
ggcorr(df1)
rcorr(df1$Age,df1$Title)
library(Hmisc)
rcorr(df1$Age,df1$Title)
corrgram::corrgram_cov2cor(df1)
library(caret) # model tunning
caret::findCorrelation(df1)
Hmisc::rcorr
# Importing the necessary library
library(rpart) # Loading Decision Tree Package
library(plyr) # means
library(dplyr) # data cleaning
library(stringr) # data cleaning
library(naniar)  # missing data visualizations
library(ggplot2) # Data visualization
library(readr) # CSV file I/o, e.g. the read_csv function.
library(rattle) # Visualize Decision trees
library(rpart.plot) # visualize decision trees.
library(caret) # model tunning
library(caTools) # cross validation
library(pROC) # ROC curves
library(RColorBrewer)
library(Hmisc)
install.packages("Hmisc")
library(kableExtra) # markdown tables
Hmisc::rcorr
corr(df1)
cor(df1)
df11<- df1[-3]
view(df1)
df1<- df1[-3]
view(df1)
df2<-df1[c(-8,-12)]
df2
cor(df2)
rcorr(res$Age, res$Title)
cor.test(df1$Age,df1$Title)
# Handling missing value of 'Age columns
df1$Age[is.na(df1$Age)] <- with(df1, ave(Age, Pclass, Title,
FUN = function(x) median(x, na.rm=TRUE)))[is.na(df1$Age)]
## Check if it worked
summary(df1$Age)
which(is.na(df1$Age))
view(df1)
which(is.na(df1$Age)
which(is.na(df1$Age))
view(df1)
which(is.na(df1$Age))
summary(is.na(df1))
## For some reason, we have a NA for Age at row 980. Let's give it the median value.
require(dplyr)
tbl <- df1 %>% group_by(Pclass) %>% summarise(median(Age, na.rm=TRUE))
df1$Age[980] <- tbl[3,2]
## Convert to numeric
df1$Age <- as.numeric(df1$Age)
which(is.na(df1$Age))
# Working with Cabin column
table(is.na(df1$Cabin))
# Working with Cabin column
table(df1$Cabin)
# Working with Cabin column
table(df1$Cabin)
table(is.na(df1$Cabin))
for (i in df1){
df1[Cabin]=df1[cabin].str[:1]
}
df1$CabinL <- NA
df1$CabinL <- factor(substr(df1$Cabin, start=1, stop=1))
## Check if it worked
table(df1$CabinL)
table(df1$Cabin)
df1$CabinFloor <- NA
df1$CabinFloor <- ifelse(res$CabinL=="A", 1,
ifelse(res$CabinL=="B", 2,
ifelse(res$CabinL=="C", 3,
ifelse(res$CabinL=="D", 4,
ifelse(res$CabinL=="E", 5,
ifelse(res$CabinL=="F", 6,
ifelse(res$CabinL=="G", 7,
ifelse(res$CabinL=="T", 0, NA))))))))
res$CabinFloor <- as.integer(res$CabinFloor)
df1$CabinFloor <- as.integer(df1$CabinFloor)
df1$CabinFloor <- ifelse(df1$CabinL=="A", 1,
ifelse(df1$CabinL=="B", 2,
ifelse(df1$CabinL=="C", 3,
ifelse(df1$CabinL=="D", 4,
ifelse(df1$CabinL=="E", 5,
ifelse(df1$CabinL=="F", 6,
ifelse(df1$CabinL=="G", 7,
ifelse(df1$CabinL=="T", 0, NA))))))))
df1$CabinFloor <- as.integer(df1$CabinFloor)
view(df1)
view(df1)
cor.test(df1$CabinFloor,df1$Pclass)
cor.test(df1$CabinFloor,df1$Age)
cor.test(df1$CabinFloor,df1$Sex)
cor.test(df1$CabinFloor,df1$SibSp)
cor.test(df1$CabinFloor,df1$Fare)
# From all of that we show that CabinFloor has positive relation with Pclass.
df1$CabinFloor[is.na(df1$CabinFloor)] <- with(res, ave(CabinFloor, Pclass,
FUN = function(x) mean(x, na.rm=TRUE)))[is.na(df1$CabinFloor)]
# From all of that we show that CabinFloor has positive relation with Pclass.
df1$CabinFloor[is.na(df1$CabinFloor)] <- with(df1, ave(CabinFloor, Pclass,
FUN = function(x) mean(x, na.rm=TRUE)))[is.na(df1$CabinFloor)]
## Check if it worked
summary(df1$CabinFloor)
which(is.na(df1$CabinFloor))
cor.test(df1$Age,df1$Pclass)
cor.test(df1$Age,df1$Sex)
cor.test(df1$Age,df1$Fare)
cor.test(df1$Age,df1$SibSp)
cor.test(df1$Age,df1$Parch)
cor.test(df1$Age,df1$Title)
# Droping the unnecessary columns.
view(df1)
df1<-df1[c(-8,-12,-13)]
view(df1)
ggplot(data=df1, aes(x=Age, fill=Sex)) + geom_density(alpha=0.3)
ggplot(data=df1, aes(x=Age)) + geom_density(alpha=0.3)
ggplot(data=df1, aes(x=Age,fill=Sex)) + geom_density(alpha=0.3)
# Survival vs Age
ggplot(data = train, aes( x =  Pclass,  fill = as.factor(Survived )))+geom_bar()+
facet_grid(~Sex) +
scale_fill_manual(values = cbPalette)
# Survival vs Age
ggplot(df1, aes(Survived,fill = Survived))+
geom_bar()+
ggtitle("Barplot to represent Passenger Count who Survived vs who Died")
# Survival vs Age
ggplot(df1, aes(Survived,fill = Survived))+
geom_histogram()+
ggtitle("Barplot to represent Passenger Count who Survived vs who Died")
# Survival vs Age
ggplot(df1, aes(Survived,fill = Survived))+
geom_bar()+
ggtitle("Barplot to represent Passenger Count who Survived vs who Died")
#Split the data
train<-df1[1:891]
#Split the data
train <- df1[1:891,]
view(train)
test<- df1[892:1309,]
view(test)
test<-test[-1]
view(test)
# Survival vs Age
ggplot(train, aes(Survived,fill = Survived))+
geom_bar()+
ggtitle("Barplot to represent Passenger Count who Survived vs who Died")
