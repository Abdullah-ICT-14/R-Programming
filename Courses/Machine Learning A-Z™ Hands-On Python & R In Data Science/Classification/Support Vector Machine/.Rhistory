setwd("J:/R-programming/Courses/Machine Learning A-Z™ Hands-On Python & R In Data Science/Classification/K Nearest Neighbors")
# Importing the dataset
df=read.csv('Social_Network_Ads.csv')
df=df[3:5]
df
df=df[3:5]
df=df[,3:5]
# Importing the dataset
df= read.csv('Social_Network_Ads.csv')
df=df[,3:5]
df
# Importing the dataset
df= read.csv('Social_Network_Ads.csv')
df=df[,3:5]
df
df=df[,3:5]
source('J:/R-programming/Courses/Machine Learning A-Z™ Hands-On Python & R In Data Science/Classification/Logistic Regression/Logistic regression.R')
# Encoding the target feature as factor
df$Purchased=factor(df$Purchased,levels = c(0,1))
# Splitting dataset into train and test set
# install package('caTools)
library('caTools')
set.seed(123)
split=sample.split(df$Purchased,SplitRatio = 0.75)
training_set=subset(df,split==TRUE)
test_set=subset(df,split==FALSE)
# Feature Scaling
training_set[-3]=scale(training_set[-3])
test_set[-3]=scale(test_set[-3])
View(test_set)
View(training_set)
# Fitting KNN to the training set and predicting the result
library('class')
y_pred=knn(train = training_set[, -3],test=test_set[, -3],
cl=training_set[, 3],k=5
)
y_pred
# Making the confusion matrix
cm=table(test_set[,3],y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'K-NN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("J:/R-programming/Courses/Machine Learning A-Z™ Hands-On Python & R In Data Science/Classification/Support Vector Machine")
# Importing the dataset
df= read.csv('Social_Network_Ads.csv')
df=df[,3:5]
df
# Splitting dataset into train and test set
# install package('caTools)
library('caTools')
set.seed(1234)
split=sample.split(df$Purchased,SplitRatio = 0.75)
training_set=subset(df,split==TRUE)
test_set=subset(df,split==FALSE)
# Feature Scaling
training_set[, 1:2]= scale(training_set[, 1:2])
test_set[, 1:2]= scale(test_set[,1:2])
# Importing the dataset
df= read.csv('Social_Network_Ads.csv')
df=df[,3:5]
df
# Splitting dataset into train and test set
# install package('caTools)
library('caTools')
set.seed(1234)
split=sample.split(df$Purchased,SplitRatio = 0.75)
training_set=subset(df,split==TRUE)
test_set=subset(df,split==FALSE)
# Feature Scaling
training_set[, 1:2]= scale(training_set[, 1:2])
test_set[, 1:2]= scale(test_set[,1:2])
# Fitting SVM model on the data set
library('e1071')
svm_class=svm(formula =Purchased ~ .,
data=training_set,
type='C-classification',
kernel='linear'
)
y_pred=predict(svm_class,newdata = test_set[-3])
y_pred
# Making the confusion matrix
cm=table(test_set[, 3],y_pred)
cm
