setwd("J:/R-programming/Courses/Machine Learning A-Z™ Hands-On Python & R In Data Science/Classification")
setwd("J:/R-programming/Courses/Machine Learning A-Z™ Hands-On Python & R In Data Science/Classification/Logistic Regression")
# Importing the dataset
df= read.csv('Social_Network_Ads.csv')
df=df[,3:5]
df
# Splitting dataset into train and test set
# install package('caTools)
library('CaTools')
install.packages("caTools")
# Splitting dataset into train and test set
# install package('caTools)
library('CaTools')
# Splitting dataset into train and test set
# install package('caTools)
library('caTools')
set.seed(1234)
split=sample.split(df$Purchased,SplitRatio = 0.75)
training_set=subset(df,split==TRUE)
test_set=subset(df,split==FALSE)
View(test_set)
View(test_set)
View(training_set)
# Feature Scaling
training_set[, 1:2]= scale(training_set[, 1:2])
test_set[, 1:2]= scale(test_set[,1:2])
View(df)
View(training_set)
View(test_set)
# Fitting logistic regression model on the data set
lr=glm(formula = df$Purchased ~ .,
family = bionomial,
data=df
)
# Fitting logistic regression model on the data set
lr=glm(formula = df$Purchased ~ .,
family = binomial,
data=df
)
# Fitting logistic regression model on the data set
lr=glm(formula = df$Purchased ~ .,
family = binomial,
data=training_set
)
# Importing the dataset
df= read.csv('Social_
Network_Ads.csv')
# Importing the dataset
df= read.csv('Social_Network_Ads.csv')
df=df[,3:5]
df
# Splitting dataset into train and test set
# install package('caTools)
library('caTools')
set.seed(1234)
split=sample.split(df$Purchased,SplitRatio = 0.75)
training_set=subset(df,split==TRUE)
test_set=subset(df,split==FALSE)
# Feature Scaling
training_set[, 1:2]= scale(training_set[, 1:2])
test_set[, 1:2]= scale(test_set[,1:2])
# Fitting logistic regression model on the data set
lr=glm(formula = df$Purchased ~ .,
family = binomial,
data=training_set
)
# Fitting logistic regression model on the data set
lr=glm(formula =Purchased ~ .,
family = binomial,
data=training_set
)
prob_pred=predict(lr,type = 'response',newdata = test_set[-3])
prob_pred
y_pred=ifelse(prob_pred>0.5 ,1,0)
y_pred
library(ggplot2)
# Making the confusion matrix
cm=table(test_set[, 3],y_pred)
cm
